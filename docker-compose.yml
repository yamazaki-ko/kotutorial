version: '3'
services:
  go:
    build:
      context: ./app          # ビルドに使用するDockerfileの場所
      dockerfile: DockerFile  # Dockerファイル名
    stdin_open: true          # true指定で標準入力を開き続ける
    tty: true                 # true指定でコンテナに擬似端末を割り当てる
    volumes:
      - ./app:/go/src/app     # ホストとコンテナのディレクトリを紐付ける（＝バインドマウント）
    ports:
      - 8080:8080             # ホストとコンテナのポートを割り当てる
    environment:              # 環境変数の設定
      - MYSQL_ROOT_USER
      - MYSQL_ROOT_PASSWORD
      - MYSQL_HOST
      - MYSQL_DATABASE
    depends_on:
      - db                    # dbが先に起動される

  db:
    image: mysql:8.0                # 使用するイメージ
    container_name: godockerDB      # コンテナ名
    platform: linux/x86_64          # M1チップ対応のため追記
    environment:                    # 環境変数の設定
      - MYSQL_ROOT_PASSWORD
      - MYSQL_DATABASE
    restart: always                 # OS起動時にコンテナ自動起動
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d        # コンテナ起動時にSQLが実行される
    ports:
    - 3306:3306                     # ポート割り当て
    
  nginx:
        container_name: "nginx"
        build:
          context: ./nginx 
          dockerfile: DockerFile
        ports:
            - "80:80"
        depends_on:
            - "go"
    

## docker composeについて
## ■コマンド
## -d, --detach バックグランドで実行します


## ■tty
## docker run の-tコマンドに相当
## true指定でコンテナを起動し続けることができる
## -tオプションのtはttyのtです。
## コンテナとホストマシンの標準出力をつなぐオプションで、 これを指定することでコンテナの出力がホストマシンに伝えられます。
## つまり、このオプションを指定することで、コンテナの出力をホストマシンで確認できるようになります。

## ■stdin_open
## docker run の-iコマンドに相当
## true指定で標準入出力とエラー出力をコンテナに結びつける
## -iオプションのiはinteractiveのiです。
## コンテナとホストマシンの標準入力をつなぐオプションで、 これを指定することでホストマシンでの入力がコンテナに伝えられます。
## つまり、このオプションを指定することで、ホストマシンからコンテナ内へコマンド等を入力できるようになります。

## ↑2つでdocker run -itに相当
## キーボード入力をコンテナに結びつける
## シェルを起動させるイメージ

## ■depends_on
## コンテナの作成順序

## ■volumes
## マウントする設定ファイルのパスを指定
## （マウント：周辺機器や外部記憶装置をOSに認識させること）
## ■ボリューム
## Dockerコンテナで扱うデータを永続化する仕組み
## Dockerの中にボリュームというデータを保持する領域を確保して永続化する
## ■例
## - /var/lib/mysql パス指定のみ。Engine にボリュームを生成させます。
## - datavolume:/var/lib/mysql 名前つきボリューム。

## ■バインドマウント
## ホスト側のディレクトリやファイルをコンテナ内にマウントすること
## services内で定義しているvolumes: は、いわゆるバインドマウントです。
## ■例
## - /opt/data:/var/lib/mysql 絶対パスのマッピングを指定。
## - ./cache:/tmp/cache ホストからのパス指定。Compose ファイルからの相対パス。
## - ~/configs:/etc/configs/:ro ユーザーディレクトリからの相対パス。
## 
## 項目を細かく設定して記述することもできます。

## type : マウントタイプ(volume, bind, tmpfs, npipe)
## source : マウント元
## target : マウントされるコンテナのパス
## read_only : 読み込み専用
## bind : バインドオプション
## propagation : バインドの伝播モード
## volume : ボリュームオプション
## nocopy : ボリューム生成時のコンテナからのデータコピーを無効
## tmpfs : tmpfsオプション
## size : tmpfsマウントのサイズ
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 
## 


